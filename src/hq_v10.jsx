/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF, PerspectiveCamera, MeshReflectorMaterial, SpotLight, TransformControls } from "@react-three/drei";
import { Bloom, EffectComposer, SSR } from "@react-three/postprocessing"
import { Leva, useControls } from "leva"
import * as THREE from "three";

import { MathUtils, PlaneGeometry, Vector3 } from 'three'
import { Canvas, useFrame, useThree } from '@react-three/fiber'

export default function HQmain(props) {
    const { nodes, materials } = useGLTF("./hq-simple-remeshed12.glb");


    console.log(materials["main-metal-reflective"]);
    materials["main-metal-reflective"].roughness = 0.2
    materials["main-metal-reflective"].metalness = 0.8
    materials["main-metal-reflective"].reflectivness = 0
    materials["main-metal-reflective"].color = new THREE.Color(0x1E2F45);



    function MovingSpot({ vec = new Vector3(), ...props }) {
        const light = useRef()
        const viewport = useThree((state) => state.viewport)
        useFrame((state) => {
            light.current.target.position.lerp(vec.set((state.mouse.x * viewport.width) / 2, (state.mouse.y * viewport.height) / 2, 0), 0.1)
            light.current.target.updateMatrixWorld()
        })
        return <SpotLight castShadow ref={light} penumbra={1} distance={6} angle={0.35} attenuation={5} anglePower={4} intensity={2} {...props} />
    }

    useFrame((state, delta) => {
        // console.log(state.camera.position)


        const angle = state.clock.elapsedTime
        const multi = 0.5

        // state.camera.position.x = -Math.sin(angle + 10) + 10
        // state.camera.position.z = Math.cos(angle + 10)
        // state.camera.lookAt(0, 5, 0)


        lightsSpin.current.position.x = Math.cos(angle * multi)
        lightsSpin.current.position.z = Math.sin(angle * multi)
        lightsSpin.current.lookAt(0, 0, 0)




        // ...
    })


    return (<>
        <group {...props} dispose={null}>

            <PerspectiveCamera
                makeDefault={false}
                far={1000}
                near={0.1}
                fov={20.41}
                position={[6.5, 10, 42]}
                rotation={[-0.13, 0.13, 0.02]}
            />
            {/* <spotLight
                intensity={1.06}
                angle={0.85}
                penumbra={0.15}
                decay={2}
                color="#ff0009"
                position={[0, 17.16, 0]}
                rotation={[-Math.PI / 2, 0, 0]}
            /> */}
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["light-plane"].geometry}
                material={materials.top_light}
            />
            <group position={[0.42, 0.08, -7.02]}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh072.geometry}
                    material={nodes.Mesh072.material}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh072_1.geometry}
                    material={materials["main-metal-reflective"]}
                />
            </group>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.table_base.geometry}
                material={materials["main-metal-reflective"]}
                position={[0.42, 0.08, -7.02]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh054.geometry}
                material={materials["main-metal-reflective"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh054_1.geometry}
                material={materials.white_ambient_light}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.table001.geometry}
                material={materials["display Table"]}
                position={[0.42, 0.08, -7.02]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.outer_plate.geometry}
                material={materials["main-metal-reflective"]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={0.01}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["outer-structure"].geometry}
                material={materials["main-metal-reflective"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes["center-lamp"].geometry}
                material={materials["main-metal-reflective"]}
                position={[0, 8.95, -3.51]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh055.geometry}
                material={materials["main-metal-reflective"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh055_1.geometry}
                material={materials.white_ambient_light}
            />
            <group rotation={[0, -1.31, 0]}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh082.geometry}
                    material={materials["main-metal-reflective"]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh082_1.geometry}
                    material={materials.white_ambient_light}
                />
            </group>
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh036.geometry}
                material={materials["main-metal-reflective"]}
            />
            <mesh
                castShadow
                receiveShadow
                geometry={nodes.Mesh036_1.geometry}
                material={materials.white_ambient_light}
            />
            <group rotation={[0, -1.26, 0]}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh057.geometry}
                    material={materials["main-metal-reflective"]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Mesh057_1.geometry}
                    material={materials.white_ambient_light}
                />
            </group>
            {/* <mesh
                position-y={- 1}
                rotation-x={- Math.PI * 0.5}
                scale={50}
            >
                <planeGeometry />
                <MeshReflectorMaterial />

            </mesh> */}
        </group>
    </>
    );
}

useGLTF.preload("./hq-simple-remeshed12.glb");

